{"version":3,"sources":["worker/worker.js","webpack:///./src/worker/worker.js?3ea9","CodeScanner.js","worker/index.js","App.js","serviceWorker.js","index.js"],"names":["inst","wrap","Worker","module","exports","f","this","scannerWorker","ScannerWorker","init","a","video","maxVideoWidth","maxVideoHeight","facingMode","navigator","mediaDevices","getUserMedia","audio","width","max","height","mediaStream","srcObject","play","Promise","r","onloadedmetadata","renderOverlay","canvas","codes","codeOverlayColor","codeIndexColor","mirrorUserImage","ctx","getContext","clearRect","font","strokeStyle","fillStyle","lineWidth","forEach","sym","i","points","beginPath","j","length","x","y","moveTo","lineTo","closePath","stroke","scale","getScaleX","fillText","processImage","onResult","videoWidth","videoHeight","drawImage","imgData","getImageData","scanImageData","sleep","ms","setTimeout","main","onError","message","CodeScanner","parentProps","defaultOptions","console","log","error","options","videoRef","useRef","canvasRef","useEffect","current","style","position","top","left","transform","ref","App","useState","result","setResult","setFacingMode","className","onClick","res","map","value","join","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e6fe3195.chunk.js","sourcesContent":["var wrap = require('comlink').wrap,Worker = require(\"!worker-loader?{}!/Users/fbedussi/repo/code-scanner-app/node_modules/comlink-loader/dist/comlink-worker-loader.js!/Users/fbedussi/repo/code-scanner-app/node_modules/babel-loader/lib/index.js??ref--6-oneOf-1!/Users/fbedussi/repo/code-scanner-app/node_modules/eslint-loader/dist/cjs.js??ref--5-0!/Users/fbedussi/repo/code-scanner-app/src/worker/worker.js\"),inst;module.exports = function f() {if (this instanceof f) return wrap(Worker());return inst || (inst = wrap(Worker()));};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"5adc6a6833404f43b4fc.worker.js\");\n};","import React, { useEffect, useRef } from 'react';\nimport ScannerWorker from './worker';\n\nconst scannerWorker = new ScannerWorker();\n\nconst SCAN_PROID_MS = 800;\n\nconst init = async ({ video, maxVideoWidth, maxVideoHeight, facingMode }) => {\n  const mediaStream = await navigator.mediaDevices.getUserMedia({\n    audio: false,\n    video: {\n      facingMode,\n      width: { max: maxVideoWidth },\n      height: { max: maxVideoHeight },\n    },\n  });\n  video.srcObject = mediaStream;\n  video.play();\n  await new Promise(r => {\n    video.onloadedmetadata = r;\n  });\n};\n\nconst renderOverlay = ({\n  canvas,\n  codes,\n  facingMode,\n  codeOverlayColor,\n  codeIndexColor,\n  mirrorUserImage,\n}) => {\n  const ctx = canvas.getContext('2d');\n  const width = canvas.width;\n  const height = canvas.height;\n  ctx.clearRect(0, 0, width, height);\n  ctx.font = '20px serif';\n  ctx.strokeStyle = codeOverlayColor;\n  ctx.fillStyle = codeIndexColor;\n  ctx.lineWidth = 6;\n  codes.forEach((sym, i) => {\n    const points = sym.points;\n    ctx.beginPath();\n    for (let j = 0; j < points.length; ++j) {\n      const { x, y } = points[j];\n      if (j === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n    ctx.closePath();\n\n    ctx.stroke();\n    ctx.scale(getScaleX(mirrorUserImage, facingMode), 1);\n    ctx.fillText('#' + i, points[0].x, points[0].y - 10);\n    ctx.scale(1, 1);\n  });\n};\n\nconst processImage = async ({\n  video,\n  canvas,\n  onResult,\n  facingMode,\n  codeOverlayColor,\n  codeIndexColor,\n  mirrorUserImage,\n}) => {\n  const width = video.videoWidth;\n  const height = video.videoHeight;\n  canvas.width = width;\n  canvas.height = height;\n  if (!width || !height) {\n    return;\n  }\n\n  const ctx = canvas.getContext('2d');\n  ctx.drawImage(video, 0, 0, width, height);\n  const imgData = ctx.getImageData(0, 0, width, height);\n  const codes = await scannerWorker.scanImageData(imgData);\n  renderOverlay({\n    canvas,\n    codes,\n    facingMode,\n    codeOverlayColor,\n    codeIndexColor,\n    mirrorUserImage,\n  });\n  if (codes.length) {\n    onResult(codes);\n  }\n};\n\nconst sleep = ms =>\n  new Promise(r => {\n    setTimeout(r, ms);\n  });\n\nconst main = async ({\n  video,\n  canvas,\n  onResult,\n  onError,\n  maxVideoWidth,\n  maxVideoHeight,\n  facingMode,\n  codeOverlayColor,\n  codeIndexColor,\n  mirrorUserImage,\n}) => {\n  try {\n    await init({ video, maxVideoWidth, maxVideoHeight, facingMode });\n\n    while (true) {\n      await processImage({\n        video,\n        canvas,\n        onResult,\n        facingMode,\n        codeOverlayColor,\n        codeIndexColor,\n        mirrorUserImage,\n      });\n      await sleep(SCAN_PROID_MS);\n    }\n  } catch (err) {\n    onError(err.message);\n  }\n};\n\nconst getScaleX = (mirrorUserImage, facingMode) =>\n  mirrorUserImage && facingMode === 'user' ? -1 : 1;\n\nconst CodeScanner = parentProps => {\n  const defaultOptions = {\n    width: 400,\n    height: 300,\n    onResult: console.log,\n    onError: console.error,\n    maxVideoWidth: 640,\n    maxVideoHeight: 640,\n    facingMode: 'environment',\n    codeOverlayColor: '#00ff00',\n    codeIndexColor: '#ff0000',\n    mirrorUserImage: true,\n  };\n  const options = {\n    ...defaultOptions,\n    ...parentProps,\n  };\n  const {\n    width,\n    height,\n    onResult,\n    onError,\n    maxVideoWidth,\n    maxVideoHeight,\n    facingMode,\n    codeOverlayColor,\n    codeIndexColor,\n    mirrorUserImage,\n  } = options;\n\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    if (videoRef.current && canvasRef.current) {\n      main({\n        video: videoRef.current,\n        canvas: canvasRef.current,\n        onResult,\n        onError,\n        maxVideoWidth,\n        maxVideoHeight,\n        facingMode,\n        codeOverlayColor,\n        codeIndexColor,\n        mirrorUserImage,\n      });\n    }\n  }, [\n    videoRef,\n    canvasRef,\n    onResult,\n    onError,\n    maxVideoWidth,\n    maxVideoHeight,\n    facingMode,\n    codeOverlayColor,\n    codeIndexColor,\n    mirrorUserImage,\n  ]);\n\n  const style = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: `${width}px`,\n    height: `${height}px`,\n  };\n  return (\n    <div\n      style={{\n        ...style,\n        position: 'relative',\n        transform: `scaleX(${getScaleX(mirrorUserImage, facingMode)})`,\n      }}\n    >\n      <video ref={videoRef} width={width} height={height} style={style} />\n      <canvas ref={canvasRef} width={width} height={height} style={style} />\n    </div>\n  );\n};\n\nexport default CodeScanner;\n","// eslint-disable-next-line\nimport Worker from 'comlink-loader!./worker'; // inline loader\n\nexport default Worker;\n","import React, { useState } from 'react';\nimport './App.css';\nimport CodeScanner from './CodeScanner';\n\nfunction App() {\n  const [result, setResult] = useState('');\n  const [facingMode, setFacingMode] = useState('environment');\n\n  return (\n    <div className=\"App\">\n      <h1>Code Scanner</h1>\n      <div>Result: {result}</div>\n      <div>\n        <button onClick={() => setResult('')}>reset</button>\n      </div>\n      <div>\n        <button\n          onClick={() =>\n            setFacingMode(facingMode === 'environment' ? 'user' : 'environment')\n          }\n        >\n          current camera: {facingMode} switch camera\n        </button>\n      </div>\n      <CodeScanner\n        onResult={res => setResult(res.map(({ value }) => value).join(', '))}\n        onError={setResult}\n        facingMode={facingMode}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}